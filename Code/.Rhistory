p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
for(i in 1:B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
}
length(B)
length(h)
length(c)
length(theta)
length(Y)
df = data.frame(Theta = theta, H = h, C = c, Y = y)
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('labeled_sample_100000.csv'))
HC_synthetic = read.csv("../Data/labeled_sample_100000.csv")
HC_beta = HC_synthetic[which(HC_synthetic$Y == 1),]
HC_gaussian = HC_synthetic[which(HC_synthetic$Y == 0),]
png("HC_total.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black") +
geom_point(data = HC_beta, aes(x = H, y = C), color = "red", alpha = .8) +
geom_point(data = HC_gaussian, aes(x = H, y = C), color = "blue", alpha = .8)
dev.off()
png("HC_total.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black") +
geom_point(data = HC_beta, aes(x = H, y = C), color = "red", alpha = .8) +
geom_point(data = HC_gaussian, aes(x = H, y = C), color = "blue", alpha = .8)
dev.off()
png("HC_true.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black")
dev.off()
png("HC_beta.png", width = 600, height = 900)
ggplot(data = HC_beta, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "red")
dev.off()
png("HC_gaussian.png", width = 600, height = 900)
ggplot(data = HC_gaussian, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "blue")
dev.off()
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
if(h[i] <= 1 && c[i] >= 0)
i = i + 1
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('labeled_sample_100000.csv'))
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
if(h[i] <= 1 && c[i] >= 0)
i = i + 1
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
png("HC_total.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black") +
geom_point(data = HC_beta, aes(x = H, y = C), color = "red", alpha = .8) +
geom_point(data = HC_gaussian, aes(x = H, y = C), color = "blue", alpha = .8)
dev.off()
png("HC_true.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black")
dev.off()
png("HC_beta.png", width = 600, height = 900)
ggplot(data = HC_beta, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "red")
dev.off()
png("HC_gaussian.png", width = 600, height = 900)
ggplot(data = HC_gaussian, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "blue")
dev.off()
HC_synthetic = read.csv("../Data/labeled_sample_100000.csv")
HC_beta = HC_synthetic[which(HC_synthetic$Y == 1),]
HC_gaussian = HC_synthetic[which(HC_synthetic$Y == 0),]
png("HC_total.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black") +
geom_point(data = HC_beta, aes(x = H, y = C), color = "red", alpha = .8) +
geom_point(data = HC_gaussian, aes(x = H, y = C), color = "blue", alpha = .8)
dev.off()
png("HC_true.png", width = 600, height = 900)
ggplot(data = HC_3, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "black")
dev.off()
png("HC_beta.png", width = 600, height = 900)
ggplot(data = HC_beta, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "red")
dev.off()
png("HC_gaussian.png", width = 600, height = 900)
ggplot(data = HC_gaussian, aes(x = H, y = C)) +
geom_point(size = 1.5, alpha = .8, color = "blue")
dev.off()
hist(c)
hist(h)
D = 3
cotas.sup.c1x = readingMPR(3, 1)
cotas.sup.c1y = readingMPR(3, 2)
cotas.sup.c2x = readingMPR(3, 3)
cotas.sup.c2y = readingMPR(3, 4)
source("ReadingMPR.R")
cotas.sup.c1x = readingMPR(3, 1)
cotas.sup.c1y = readingMPR(3, 2)
cotas.sup.c2x = readingMPR(3, 3)
cotas.sup.c2y = readingMPR(3, 4)
cotas.sup.x = readingMPR(3, 1)
cotas.sup.y = readingMPR(3, 2)
cotas.inf.x = readingMPR(3, 3)
cotas.inf.y = readingMPR(3, 4)
h[1]
cotas.sup.x == cotas.sup.x
cotas.sup.x == h[i]
which(cotas.sup.x == h[i])
(cotas.sup.x - h[i])
(cotas.sup.x - h[1])
which(cotas.sup.x == h[1])
which((cotas.sup.x - h[1]) == min(cotas.sup.x - h[1]))
cotas.sup.x[8332]
h[1]
cotas.sup.x = readingMPR(3, 1)
cotas.sup.x[8332]
cotas.sup.x[8332] - h[1]
which(abs(cotas.sup.x - h[1]) == min(abs(cotas.sup.x - h[1])))
cotas.sup.x[276]
h[1]
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
i = i + 1
}
}
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
print(i)
i = i + 1
}
}
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
print(c[i])
print(cotas.inf.y[index_inf])
print(cotas.sup.y[index_sup])
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
#print(c[i])
#print(cotas.inf.y[index_inf])
#print(cotas.sup.y[index_sup])
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
print(i)
i = i + 1
}
}
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
print(i)
#print(c[i])
#print(cotas.inf.y[index_inf])
#print(cotas.sup.y[index_sup])
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
print(i)
i = i + 1
}
}
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
print(i)
i = i + 1
}
}
}
df = data.frame(Theta = theta, H = h, C = c, Y = Y)
write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.47, max = 1.48, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
#if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
#  print(i)
i = i + 1
#}
}
}
#df = data.frame(Theta = theta, H = h, C = c, Y = Y)
#write.csv(df, paste0('../Data/labeled_sample_100000.csv'))
i = 0
for(i in 1:B){
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
#  print(i)
i = i + 1
}
}
print(i)
j = 0
for(i in 1:B){
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
cat('complexity: ', c[i], ' cota sup: ', cotas.sup.y[index_sup], ' cota inf: ', cotas.inf.y[index_inf], '\n')
j = j + 1
}
}
print(j)
c[10]
i = 10
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
cat('complexity: ', c[i], ' cota sup: ', cotas.sup.y[index_sup], ' cota inf: ', cotas.inf.y[index_inf], '\n')
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.4, max = 1.5, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
#if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
#  print(i)
i = i + 1
#}
}
}
j = 0
for(i in 1:B){
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
cat('complexity: ', c[i], ' cota sup: ', cotas.sup.y[index_sup], ' cota inf: ', cotas.inf.y[index_inf], '\n')
j = j + 1
}
}
print(j)
hist(c)
HC_3 = HC_total[which(HC_total$D == 3), 1:2]
x = HC_3$H
y = HC_3$C
df_C = data.frame(x = HC_3$C)
df_H = data.frame(x = HC_3$H)
beta_shannon = ebeta(x, method = "mle")
beta_complexity = ebeta(y, method = "mle")
gamma_shannon = egamma(x, method = "mle")
gamma_complexity = egamma(y, method = "mle")
lnorm_shannon = elogis(x)
lnorm_complexity = elogis(y)
norm_shannon = enorm(x)
norm_complexity = enorm(y)
ggplot(data = data.frame(x = seq(0.99, 1, by = 0.001))) +
stat_function(fun = dbeta, args = list(shape1 = beta_shannon$parameters[2] * 1000, shape2 = beta_shannon$parameters[2]), aes(x = x, color = 'Beta')) +
#stat_function(fun = dbeta, args = list(shape1 = beta_shannon$parameters[1], shape2 = beta_shannon$parameters[2]), aes(x = x, color = 'Beta')) +
#stat_function(fun = dgamma, args = list(shape = gamma_shannon$parameters[1], scale = gamma_shannon$parameters[2]), aes(x = x, color = 'Gamma')) +
stat_function(fun = dlogis, args = list(location = lnorm_shannon$parameters[1], scale = lnorm_shannon$parameters[2]), aes(x = x, color = 'Logistic')) +
stat_function(fun = dnorm, args = list(mean = norm_shannon$parameters[1], sd = norm_shannon$parameters[2]), aes(x = x, color = 'Normal')) +
geom_density(data = df_H, aes(x = x, color = 'Empirical Distribution')) +
ylab('Density') + labs(color = "Distributions") + ggtitle('Shannon Entropy Estimation') +
theme_classic(base_size = 12, base_family = "serif") + theme(plot.title = element_text(hjust=0.5))
ggplot(data = data.frame(x = seq(from = 0, to = 0.01, by = 0.001))) +
stat_function(fun = dbeta, args = list(shape1 = beta_shannon$parameters[2], shape2 = beta_shannon$parameters[2] * 1000), aes(x = x, color = 'Beta')) +
#stat_function(fun = dbeta, args = list(shape1 = beta_complexity$parameters[1], shape2 = beta_complexity$parameters[2]), aes(x = x, color = 'Beta')) +
#stat_function(fun = dgamma, args = list(shape = gamma_complexity$parameters[1], scale = gamma_complexity$parameters[2]), aes(x = x, color = 'Gamma')) +
stat_function(fun = dlogis, args = list(location = lnorm_complexity$parameters[1], scale = lnorm_complexity$parameters[2]), aes(x = x, color = 'Logistic')) +
stat_function(fun = dnorm, args = list(mean = norm_complexity$parameters[1], sd = norm_complexity$parameters[2]), aes(x = x, color = 'Normal')) +
geom_density(data = df_C, aes(x = x, color = 'Empirical Distribution')) +
ylab('Density') + labs(color = "Distributions") + ggtitle('Statistical Complexity Estimation') +
theme_classic(base_size = 12, base_family = "serif") + theme(plot.title = element_text(hjust=0.5))
beta_shannon
beta_complexity
ggplot(data = data.frame(x = seq(from = 0, to = 0.01, by = 0.001))) +
stat_function(fun = dbeta, args = list(shape1 = 1.481717, shape2 = 1480.164283), aes(x = x, color = 'Beta')) +
ylab('Density') + labs(color = "Distributions") + ggtitle('Statistical Complexity Estimation') +
theme_classic(base_size = 12, base_family = "serif") + theme(plot.title = element_text(hjust=0.5))
ggplot(data = data.frame(x = seq(from = 0, to = 0.001, by = 0.0001))) +
stat_function(fun = dbeta, args = list(shape1 = 1.481717, shape2 = 1480.164283), aes(x = x, color = 'Beta')) +
ylab('Density') + labs(color = "Distributions") + ggtitle('Statistical Complexity Estimation') +
theme_classic(base_size = 12, base_family = "serif") + theme(plot.title = element_text(hjust=0.5))
cat('complexity: ', c[i], ' cota sup: ', cotas.sup.y[index_sup], ' cota inf: ', cotas.inf.y[index_inf], '\n')
i
i = 10
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
cat('complexity: ', c[i], ' cota sup: ', cotas.sup.y[index_sup], ' cota inf: ', cotas.inf.y[index_inf], '\n')
source("ReadingMPR.R")
B = 100000
theta = runif(min = 1.3, max = 1.6, n = B)
p = 0.5
Y = rbinom(n = B, 1, p)
h = c = rep(0, B)
D = 3
cotas.sup.x = readingMPR(D, 1)
cotas.sup.y = readingMPR(D, 2)
cotas.inf.x = readingMPR(D, 3)
cotas.inf.y = readingMPR(D, 4)
i = 1
while(i <= B){
if(Y[i] == 1){
h[i] = rbeta(shape1 = theta[i]*(1000), shape2 = theta[i], n = 1)
c[i] = rbeta(shape1 = theta[i], shape2 = theta[i]*(1000), n = 1)
}
if(Y[i] == 0){
h[i] = rnorm(mean = 0.999, sd = 0.00083, n = 1)
c[i] = rnorm(mean = 0.001, sd = 0.00082, n = 1)
}
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(h[i] <= 1 && c[i] >= 0){
#if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
#  print(i)
i = i + 1
#}
}
}
j = 0
for(i in 1:B){
index_sup = which(abs(cotas.sup.x - h[i]) == min(abs(cotas.sup.x - h[i])))
index_inf = which(abs(cotas.inf.x - h[i]) == min(abs(cotas.inf.x - h[i])))
if(c[i] >= cotas.inf.y[index_inf] && c[i] <= cotas.sup.y[index_sup]){
cat('complexity: ', c[i], ' cota sup: ', cotas.sup.y[index_sup], ' cota inf: ', cotas.inf.y[index_inf], '\n')
j = j + 1
}
}
